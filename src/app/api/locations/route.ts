// src/app/api/locations/route.ts
import { NextResponse } from 'next/server';
import { db } from '@/lib/firebase';
import { collection, getDocs, addDoc, query, where, writeBatch } from 'firebase/firestore';
import type { GeoJSONFeature, GeoJSONFeatureCollection, GeoJSONPoint, GeoJSONFeatureProperties } from '@/components/sections/InteractiveMap'; // Assuming types are exported

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS', // Removed PATCH, DELETE as they are on [id] route
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
};

export async function OPTIONS(request: Request) {
  return NextResponse.json({}, { headers: corsHeaders });
}

// GET /api/locations - vrati sve lokacije kao GeoJSON FeatureCollection
export async function GET() {
  try {
    const locationsCollection = collection(db, "locations");
    const snapshot = await getDocs(locationsCollection);
    
    const features: GeoJSONFeature[] = snapshot.docs.map(doc => {
      const data = doc.data();
      return {
        type: "Feature", // Ensuring the type is "Feature"
        id: doc.id,
        geometry: data.geometry as GeoJSONPoint, // Assuming geometry is stored correctly
        properties: data.properties as GeoJSONFeatureProperties, // Assuming properties are stored correctly
      };
    });

    const featureCollection: GeoJSONFeatureCollection = {
      type: "FeatureCollection",
      features: features,
    };
    return NextResponse.json(featureCollection, { headers: corsHeaders });
  } catch (error) {
    console.error("Error fetching locations from Firestore:", error);
    return NextResponse.json({ error: "Interna greška servera prilikom dohvaćanja lokacija" }, { status: 500, headers: corsHeaders });
  }
}

// POST /api/locations - dodaj novu lokaciju
export async function POST(request: Request) {
  try {
    const feature = await request.json() as Omit<GeoJSONFeature, 'id'>; // Expecting a GeoJSON feature, ID will be auto-generated by Firestore

    if (!feature || typeof feature !== 'object' || feature.type !== 'Feature' || !feature.geometry || !feature.properties) {
      return NextResponse.json({ error: "Neispravan GeoJSON Feature format" }, { status: 400, headers: corsHeaders });
    }
    
    // Ensure geometry and properties are not undefined
    if (typeof feature.geometry !== 'object' || feature.geometry === null || typeof feature.properties !== 'object' || feature.properties === null) {
        return NextResponse.json({ error: "GeoJSON Feature mora imati definirane 'geometry' i 'properties' objekte." }, { status: 400, headers: corsHeaders });
    }


    // Data to be stored in Firestore: just geometry and properties. ID will be Firestore's doc ID.
    // And we must store the "type: Feature" property if we want to reconstruct the full feature later.
    const docData = {
      type: "Feature", // Storing this to help reconstruct if needed, though not strictly necessary if always implied
      geometry: feature.geometry,
      properties: feature.properties,
    };

    const locationsCollection = collection(db, "locations");
    const docRef = await addDoc(locationsCollection, docData);
    
    return NextResponse.json({ message: "Lokacija dodana", id: docRef.id }, { status: 201, headers: corsHeaders });

  } catch (error) {
    console.error("Error processing POST /api/locations:", error);
    if (error instanceof SyntaxError) {
      return NextResponse.json({ error: "Neispravan JSON format u tijelu zahtjeva" }, { status: 400, headers: corsHeaders });
    }
    return NextResponse.json({ error: "Interna greška servera prilikom obrade zahtjeva" }, { status: 500, headers: corsHeaders });
  }
}
